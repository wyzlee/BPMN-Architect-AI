
'use server';

/**
 * @fileOverview An AI agent that refines raw user input into detailed textual instructions for BPMN generation.
 *
 * - refineUserInput - A function that refines user input.
 * - RefineUserInputInput - The input type for the refineUserInput function.
 * - RefineUserInputOutput - The return type for the refineUserInput function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { getRefinementSystemPrompt } from '@/app/admin/refinement-prompt/actions';

const RefineUserInputInternalSchema = z.object({
  systemPrompt: z.string().describe('The system prompt guiding the AI for refining user input.'),
  rawUserInput: z.string().describe('The raw user input describing the business process.'),
});

const RefineUserInputInputSchema = z.object({
  rawUserInput: z.string().describe('The raw user input describing the business process.'),
});
export type RefineUserInputInput = z.infer<typeof RefineUserInputInputSchema>;

const RefineUserInputOutputSchema = z.object({
  refinedInstructions: z.string().describe('The detailed textual instructions generated by the AI, ready for BPMN modeling.'),
});
export type RefineUserInputOutput = z.infer<typeof RefineUserInputOutputSchema>;

const refinementPrompt = ai.definePrompt({
  name: 'refineUserInputPrompt',
  input: { schema: RefineUserInputInternalSchema },
  output: { schema: RefineUserInputOutputSchema },
  prompt: `{{{systemPrompt}}}

User's Process Description:
\`\`\`
{{{rawUserInput}}}
\`\`\`

Based on the user's description above, provide detailed and structured instructions for BPMN modeling.
`,
  config: {
    temperature: 0.3, // Slightly more creative for interpretation but still factual
    // Safety settings might be less restrictive here as it's about rephrasing, not generating code directly
    safetySettings: [
        { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
        { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
        { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
        { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      ],
  },
});

const refineUserInputFlow = ai.defineFlow(
  {
    name: 'refineUserInputFlow',
    inputSchema: RefineUserInputInputSchema,
    outputSchema: RefineUserInputOutputSchema,
  },
  async (flowInput) => {
    const systemPromptContent = await getRefinementSystemPrompt();

    const { output } = await refinementPrompt({
      systemPrompt: systemPromptContent,
      rawUserInput: flowInput.rawUserInput,
    });

    if (!output || !output.refinedInstructions) {
      console.error('AI did not produce refined instructions. Raw user input:', flowInput.rawUserInput);
      throw new Error("L'IA n'a pas réussi à générer les instructions détaillées.");
    }
    return output;
  }
);

export async function refineUserInput(input: RefineUserInputInput): Promise<RefineUserInputOutput> {
  return refineUserInputFlow(input);
}

